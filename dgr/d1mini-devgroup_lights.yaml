substitutions:
  friendly_name: d1mini devgroup

esphome:
  name: d1mini-devgroup
  platform: ESP8266
  board: d1_mini
  libraries:
    - ESP8266WiFi
    - ESPAsyncE131
  includes:
    - ehdgr/support_device_groups_compat.h  # compatibility layer so support_device_groups_ehdgr.h need not be modified too much
    - ehdgr/support_device_groups_ehdgr.h   # support_device_groups.ino modified as minimally as possible
    - E131.h
  on_boot:
    priority: -100
    then:
      - script.execute: dgr_start
  on_loop:
    then:
      - if:
          condition:
            switch.is_on: use_dgr
          then:
            script.execute: dgr_loop

external_components:
  - source: github://esphome/esphome@dev
    components: [ light ]

debug:

logger:
  level: debug
  logs:
    script: INFO

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  manual_ip: # use a static IP so that sync'ing controller always knows what IP to use for control.
    static_ip: !secret d1minidevgroup_ip
    gateway: !secret wifi_gateway
    subnet: !secret wifi_subnet

  ap:
    ssid: "${friendly_name} Hotspot"
    password: !secret ap_password
    
  output_power: 17

captive_portal:

web_server:

script:
  - id: dgr_start
    mode: single
    then:
      - lambda: |-
          EHDGR_Init("EHTest1");
  - id: dgr_loop
    mode: single
    then:
      - lambda: |-
          // Log EHDGR_State every 10s
          static unsigned long last_state_log_time = millis();
          if (millis() > last_state_log_time + 10000)
          {
            EHDGR_LogState();
            last_state_log_time = millis();
          }
          EHDGR_StartAndLoop();
          if (id(use_0ch).state) EHDGR_Update0ChLightFromDGR(1, light0ch);
          if (id(use_1ch).state) EHDGR_Update1ChLightFromDGR(1, light1ch);
          if (id(use_2ch).state) EHDGR_Update2ChLightFromDGR(1, light2ch);
          if (id(use_3ch).state) EHDGR_Update3ChLightFromDGR(1, light3ch);
          if (id(use_4ch).state) EHDGR_Update4ChLightFromDGR(1, light4ch);
          if (id(use_5ch).state) EHDGR_Update5ChLightFromDGR(1, light5ch);
  - id: dgr_end
    mode: single
    then:
      - lambda: |-
          EHDGR_Stop();

switch:
  - platform: template
    id: use_dgr
    name: "${friendly_name} DGR"
    optimistic: true
    on_turn_off:
      - script.execute: dgr_end
      
  - platform: template
    id: use_0ch
    name: "${friendly_name} 0CH"
    optimistic: true
    on_turn_on:
      - switch.turn_off: use_1ch
      - switch.turn_off: use_2ch
      - switch.turn_off: use_3ch
      - switch.turn_off: use_4ch
      - switch.turn_off: use_5ch
  - platform: template
    id: use_1ch
    name: "${friendly_name} 1CH"
    optimistic: true
    on_turn_on:
      - switch.turn_off: use_0ch
      - switch.turn_off: use_2ch
      - switch.turn_off: use_3ch
      - switch.turn_off: use_4ch
      - switch.turn_off: use_5ch
  - platform: template
    id: use_2ch
    name: "${friendly_name} 2CH"
    optimistic: true
    on_turn_on:
      - switch.turn_off: use_0ch
      - switch.turn_off: use_1ch
      - switch.turn_off: use_3ch
      - switch.turn_off: use_4ch
      - switch.turn_off: use_5ch
  - platform: template
    id: use_3ch
    name: "${friendly_name} 3CH"
    optimistic: true
    on_turn_on:
      - switch.turn_off: use_0ch
      - switch.turn_off: use_1ch
      - switch.turn_off: use_2ch
      - switch.turn_off: use_4ch
      - switch.turn_off: use_5ch
  - platform: template
    id: use_4ch
    name: "${friendly_name} 4CH"
    optimistic: true
    on_turn_on:
      - switch.turn_off: use_0ch
      - switch.turn_off: use_1ch
      - switch.turn_off: use_2ch
      - switch.turn_off: use_3ch
      - switch.turn_off: use_5ch
  - platform: template
    id: use_5ch
    name: "${friendly_name} 5CH"
    optimistic: true
    on_turn_on:
      - switch.turn_off: use_0ch
      - switch.turn_off: use_1ch
      - switch.turn_off: use_2ch
      - switch.turn_off: use_3ch
      - switch.turn_off: use_4ch
 
  - platform: restart
    name: "${friendly_name} Restart"
    

    
light:
  - platform: binary
    name: "${friendly_name} 0Ch Light"
    id: light0ch
    output: O0CHL
    
  - platform: monochromatic
    name: "${friendly_name} 1Ch Light"
    id: light1ch
    output: O1CHLCH1
    gamma_correct: 1.0

  - platform: cwww
    name: "${friendly_name} 2Ch Light"
    id: light2ch
    cold_white: O2CHLCH1
    warm_white: O2CHLCH2
    cold_white_color_temperature: 6536 K
    warm_white_color_temperature: 2000 K
    constant_brightness: true
    gamma_correct: 1.0
    
  - platform: rgb
    name: "${friendly_name} 3Ch Light"
    id: light3ch
    red: O3CHLCH1
    green: O3CHLCH2
    blue: O3CHLCH3
    gamma_correct: 1.0
    
  - platform: rgbw
    name: "${friendly_name} 4Ch Light"
    id: light4ch
    red:   O4CHLCH1
    green: O4CHLCH2
    blue:  O4CHLCH3
    white: O4CHLCH4
    color_interlock: true
    gamma_correct: 1.0
    
  - platform: rgbww
    name: "${friendly_name} 5Ch Light"
    id: light5ch
    red: O5CHLCH1
    green: O5CHLCH2
    blue: O5CHLCH3
    cold_white: O5CHLCH4
    warm_white: O5CHLCH5
    color_interlock: true
    cold_white_color_temperature: 6536 K
    warm_white_color_temperature: 2000 K
    constant_brightness: true
    gamma_correct: 1.0

output:
  - platform: gpio
    pin: GPIO2
    id: O0CHL
    inverted: true
    
  - platform: esp8266_pwm
    pin: GPIO5
    id: O1CHLCH1
    
  - platform: template
    id: O2CHLCH1
    type: float
    write_action:
      - sensor.template.publish:
          id: S2CHLCH1
          state: !lambda "return state;"
  - platform: template
    id: O2CHLCH2
    type: float
    write_action:
      - sensor.template.publish:
          id: S2CHLCH2
          state: !lambda "return state;"
          
  - platform: template
    id: O3CHLCH1
    type: float
    write_action:
      - sensor.template.publish:
          id: S3CHLCH1
          state: !lambda "return state;"
  - platform: template
    id: O3CHLCH2
    type: float
    write_action:
      - sensor.template.publish:
          id: S3CHLCH2
          state: !lambda "return state;"
  - platform: template
    id: O3CHLCH3
    type: float
    write_action:
      - sensor.template.publish:
          id: S3CHLCH3
          state: !lambda "return state;"
          
  - platform: template
    id: O4CHLCH1
    type: float
    write_action:
      - sensor.template.publish:
          id: S4CHLCH1
          state: !lambda "return state;"
  - platform: template
    id: O4CHLCH2
    type: float
    write_action:
      - sensor.template.publish:
          id: S4CHLCH2
          state: !lambda "return state;"
  - platform: template
    id: O4CHLCH3
    type: float
    write_action:
      - sensor.template.publish:
          id: S4CHLCH3
          state: !lambda "return state;"
  - platform: template
    id: O4CHLCH4
    type: float
    write_action:
      - sensor.template.publish:
          id: S4CHLCH4
          state: !lambda "return state;"
          
  - platform: template
    id: O5CHLCH1
    type: float
    write_action:
      - sensor.template.publish:
          id: S5CHLCH1
          state: !lambda "return state;"
  - platform: template
    id: O5CHLCH2
    type: float
    write_action:
      - sensor.template.publish:
          id: S5CHLCH2
          state: !lambda "return state;"
  - platform: template
    id: O5CHLCH3
    type: float
    write_action:
      - sensor.template.publish:
          id: S5CHLCH3
          state: !lambda "return state;"
  - platform: template
    id: O5CHLCH4
    type: float
    write_action:
      - sensor.template.publish:
          id: S5CHLCH4
          state: !lambda "return state;"
  - platform: template
    id: O5CHLCH5
    type: float
    write_action:
      - sensor.template.publish:
          id: S5CHLCH5
          state: !lambda "return state;"
          
sensor:
  - platform: template
    id: S2CHLCH1
    name: "${friendly_name} 2Ch Light Ch 1"
    accuracy_decimals: 3
  - platform: template
    id: S2CHLCH2
    name: "${friendly_name} 2Ch Light Ch 2"
    accuracy_decimals: 3
  - platform: template
    id: S3CHLCH1
    name: "${friendly_name} 3Ch Light Ch 1"
    accuracy_decimals: 3
  - platform: template
    id: S3CHLCH2
    name: "${friendly_name} 3Ch Light Ch 2"
    accuracy_decimals: 3
  - platform: template
    id: S3CHLCH3
    name: "${friendly_name} 3Ch Light Ch 3"
    accuracy_decimals: 3
  - platform: template
    id: S4CHLCH1
    name: "${friendly_name} 4Ch Light Ch 1"
    accuracy_decimals: 3
  - platform: template
    id: S4CHLCH2
    name: "${friendly_name} 4Ch Light Ch 2"
    accuracy_decimals: 3
  - platform: template
    id: S4CHLCH3
    name: "${friendly_name} 4Ch Light Ch 3"
    accuracy_decimals: 3
  - platform: template
    id: S4CHLCH4
    name: "${friendly_name} 4Ch Light Ch 4"
    accuracy_decimals: 3
  - platform: template
    id: S5CHLCH1
    name: "${friendly_name} 5Ch Light Ch 1"
    accuracy_decimals: 3
  - platform: template
    id: S5CHLCH2
    name: "${friendly_name} 5Ch Light Ch 2"
    accuracy_decimals: 3
  - platform: template
    id: S5CHLCH3
    name: "${friendly_name} 5Ch Light Ch 3"
    accuracy_decimals: 3
  - platform: template
    id: S5CHLCH4
    name: "${friendly_name} 5Ch Light Ch 4"
    accuracy_decimals: 3
  - platform: template
    id: S5CHLCH5
    name: "${friendly_name} 5Ch Light Ch 5"
    accuracy_decimals: 3