substitutions:
  friendly_name: Five Channel Bulb
esphome:
  name: five-channel-bulb
  platform: ESP8266
  board: esp01_1m
  includes:
    - ehdgr/support_device_groups_compat.h  # compatibility layer so support_device_groups_ehdgr.h need not be modified too much
    - ehdgr/support_device_groups_ehdgr.h   # support_device_groups.ino modified as minimally as possible
  on_boot:
    priority: -100
    then:
      - script.execute: dgr_start
  on_loop:
    then:
      - if:
          condition:
            switch.is_on: use_dgr
          then:
            script.execute: dgr_loop

external_components:
  - source:
      type: git
      url: https://github.com/tony-fav/esphome
      ref: dev-lighttriggers
    components: [ light ]
    refresh: 0s

debug:

logger:
  level: debug
  logs:
    script: INFO

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  manual_ip: # use a static IP so that sync'ing controller always knows what IP to use for control.
    static_ip: !secret kauf_one_ip
    gateway: !secret wifi_gateway
    subnet: !secret wifi_subnet

  ap:
    ssid: "${friendly_name} Hotspot"
    password: !secret ap_password
    
  output_power: 17
  
  fast_connect: true

captive_portal:

web_server:

script:
  - id: dgr_start
    mode: single
    then:
      - lambda: |-
          EHDGR_Init("EHTest1");
  - id: dgr_loop
    mode: single
    then:
      - lambda: |-
          EHDGR_StartAndLoop();
          EHDGR_Update5ChLightFromDGR(1, my_light);
      - lambda: |-
          // Log EHDGR_State every 10s
          static unsigned long last_state_log_time = millis();
          if (millis() > last_state_log_time + 10000) 
          {
            EHDGR_LogState();
            last_state_log_time = millis();
          }
  - id: dgr_end
    mode: single
    then:
      - lambda: |-
          EHDGR_Stop();

switch:
  - platform: template
    id: use_dgr
    name: "${friendly_name} DGR"
    optimistic: true
    on_turn_off:
      - light.turn_off: my_light
      - script.execute: dgr_end
      
  - platform: template
    name: "Test Switch 1"
    optimistic: true
    on_turn_on:
      - lambda: |-
          EHDGR_SetPowerState(1, 1);
    on_turn_off:
      - lambda: |-
          EHDGR_SetPowerState(1, 0);
 
output:
  - platform: esp8266_pwm
    pin: GPIO4
    id: pwm_red
  - platform: esp8266_pwm
    pin: GPIO12
    id: pwm_green
  - platform: esp8266_pwm
    pin: GPIO14
    id: pwm_blue
    max_power: 0.6
  - platform: esp8266_pwm
    pin: GPIO5
    id: pwm_cw
  - platform: esp8266_pwm
    pin: GPIO13
    id: pwm_ww

light:
  - platform: rgbww
    name: "${friendly_name} Light"
    id: my_light
    red: pwm_red
    green: pwm_green
    blue: pwm_blue
    cold_white: pwm_cw
    warm_white: pwm_ww
    cold_white_color_temperature: 6500 K
    warm_white_color_temperature: 2700 K
    color_interlock: true # RGB or CCT
    constant_brightness: true # Brightness & Temp NOT Cool White Bright & Warm White Bright
    on_turn_on:
      lambda: |-
        ESP_LOGE("DGR", "on_turn_on");
        if ((EHDGR_GetPowerState(1) == 0) && id(use_dgr))
        {
          EHDGR_SetPowerState(1, 1);
        }
    on_turn_off:
      lambda: |-
        ESP_LOGE("DGR", "on_turn_off");
    on_cmnd_off:
      lambda: |-
        ESP_LOGE("DGR", "on_cmnd_off");
        if ((EHDGR_GetPowerState(1) > 0) && id(use_dgr))
        {
          EHDGR_SetPowerState(1, 0);
        }
    on_cmnd:
      lambda: |-
        ESP_LOGE("DGR", "on_cmnd, %d", EHDGR_LastLightUpdateByRemote);
        EHDGR_LogState();
        EHDGR_LastLightUpdateByRemote = false;